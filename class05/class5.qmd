---
title: "Class 5 Data Viz with ggplot"
author: "Derek (PID: A16942232)"
format: pdf
editor: visual
---

## Plotting in R

R has lots of ways to make plots and figures. This includes so-called **base** graphics and packages like ***ggplot2***

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
plot(cars)
```
This is a **base** R plot of the in-built `cars` database that has only two columns:
```{r}
head(cars)
```


>Q. How would we plot this dataset with **ggplot2**

All ggplot figures have at least 3 layers:

- **data**
- **aes** (how the data maps to the plot)
- **geoms** (how we draw the data, lines, points, etc)

Before I use any new package I need to download and install it with the `install.packages()` command.

I never use the `install.packages()`within my quarto document, otherwise I will reinstall the package over and over.

Once a package is installed I can load it up with the `library()` function.

```{r}
# install.packages("ggplot2)
library("ggplot2")
ggplot(cars) + aes(x = speed, y = dist) + geom_point()
```

Key-point: For simple plots (like the one above) ggplot is more verbose (we need to do more typing) but as they get more complicated ggplot starts to be more clear and simple than base R plot.

```{r}
ggplot(cars, aes(speed, dist)) + geom_point() + geom_smooth(method = "lm", se = FALSE) + labs(title = "Stopping distance of old cars", subtitle = "From the in-built cars dataset") + theme_bw() 
```

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
nrow(genes)
colnames(genes)
ncol(genes)
table(genes$State)
round(table(genes$State)/nrow(genes)*100,2)
```

The Key functions here were: 
`nrow()` and `ncol()`
`table()` is very useful for getting counts
finally `round()` for rounding.

```{r}
p <- ggplot(genes) + 
    aes(x=Condition1, y=Condition2, col = State) +
    geom_point()
p + scale_colour_manual(values = c("blue","gray","red")) + labs(title = "Gene Expresion Changes Upon Drug Treatment", x = "Control (nodrug)", y = "Drug Treatment" )
```

##Section 7: Going Further

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```
```{r}
# install.packages("dplyr")  ## un-comment to install if needed
library(dplyr)

gapminder_2007 <- gapminder %>% filter(year==2007)

ggplot(gapminder_2007) + aes(x = gdpPercap, y = lifeExp, size = pop, color = continent) + geom_point(alpha = 0.5) + scale_size_area(max_size = 10)
```

```{r}
gapminder_1957 <- gapminder %>% filter(year==1957)
ggplot(gapminder_1957) + aes(gdpPercap,lifeExp, size = pop, color = continent) + geom_point(alpha = 0.7) + scale_size_area(max_size = 15)
```
```{r}
gapminder_2007_1957 <- gapminder %>% filter(year == 1957 | year == 2007)
ggplot(gapminder_2007_1957) + aes(gdpPercap, lifeExp, color = continent, size = pop) + geom_point(alpha = 0.7) + scale_size_area(max_size = 10) + facet_wrap(~year)
```

>Q. Extract data for the US in 1992

```{r}
filter(gapminder, country =="United States", year ==1992)
```

What was the population of the US in the last year we have data for?

```{r}
filter(gapminder, country == "Spain", year == 2007)
```

>Q. What countries in the data set had a population smaller than ireland in 2007?

```{r}
filter(gapminder, country == "Ireland", year == 2007)
```
-First limit/subset the dataset to the year 2007

-Then find the `pop` value for ireland

-Then extract all rows with `pop` less than ireland

```{r}
nrow(filter(gapminder, pop<4109086, year == 2007))
filter(gapminder, pop<4109086, year == 2007)

```


## Bar Plots (8)
```{r}
gapminder_top5 <- gapminder %>% 
  filter(year==2007) %>%
  arrange(desc(pop)) %>% 
  top_n(5, pop)

gapminder_top5

ggplot(gapminder_top5) + aes(country, pop, fill = continent) + geom_bar()

geom_bar()
```



```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
